var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DoubleArrayTries","category":"page"},{"location":"#DoubleArrayTries","page":"Home","title":"DoubleArrayTries","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DoubleArrayTries.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DoubleArrayTries]","category":"page"},{"location":"#DoubleArrayTries.CommonPrefixSearch","page":"Home","title":"DoubleArrayTries.CommonPrefixSearch","text":"CommonPrefixSearch(dat::DoubleArrayTrie, key::AbstractString)\n\nReturn a iterable object that iterate through all string in the trie that has common prefix with key. Each element is  a tuple of id and the string (Tuple{Int, String}).\n\n\n\n\n\n","category":"type"},{"location":"#DoubleArrayTries.DoubleArrayTrie-Tuple{AbstractVector{<:AbstractString}}","page":"Home","title":"DoubleArrayTries.DoubleArrayTrie","text":"DoubleArrayTrie(keys::AbstractVector{<:AbstractString}; bin_mode = true)\n\nAccept a list of strings and build the double array trie. If keys is a Vector, it will be modified by sort! and  unique!. Set bin_mode = true allow '\u0000' as a character, this is needed for non-ascii strings.\n\n\n\n\n\n","category":"method"},{"location":"#DoubleArrayTries.PredictiveIDSearch","page":"Home","title":"DoubleArrayTries.PredictiveIDSearch","text":"PredictiveIDSearch(dat::DoubleArrayTrie, key::AbstractString)\n\nSimilar to PredictiveSearch, but only return the id (Int). This could be slightly faster if the  string is not needed\n\n\n\n\n\n","category":"type"},{"location":"#DoubleArrayTries.PredictiveSearch","page":"Home","title":"DoubleArrayTries.PredictiveSearch","text":"PredictiveSearch(dat::DoubleArrayTrie, key::AbstractString)\n\nReturn a iterable object that iterate through all string in the trie that has prefix of prefix. Each element is  be a tuple of id and the string (Tuple{Int, String}).\n\n\n\n\n\n","category":"type"},{"location":"#DoubleArrayTries.StringDict-Union{Tuple{AbstractVector{<:Pair{<:AbstractString, V}}}, Tuple{V}} where V","page":"Home","title":"DoubleArrayTries.StringDict","text":"StringDict(list::AbstractVector{<:Pair{<:AbstractString, V}}) where V\n\nA simple string dictionary built with DoubleArrayTrie.\n\n\n\n\n\n","category":"method"},{"location":"#DoubleArrayTries.decode-Tuple{DoubleArrayTrie, Any}","page":"Home","title":"DoubleArrayTries.decode","text":"decode(dat::DoubleArrayTrie, i::Int)\n\nTake an id i and return a corresponding string in the trie. If i <= 0 || i > length(dat), it will always  return nothing.\n\n\n\n\n\n","category":"method"},{"location":"#DoubleArrayTries.lookup-Tuple{DoubleArrayTrie, AbstractString}","page":"Home","title":"DoubleArrayTries.lookup","text":"lookup(dat::DoubleArrayTrie, key::S) where S <: Union{AbstractString, AbstractVector{UInt8}}\n\nLookup the key in the trie, return a unique id where 0 <= id <= length(dat). If the id is 0, it means the key does  not present in the trie.\n\n\n\n\n\n","category":"method"}]
}
